require "fileutils"
require "securerandom"
require "spec_helper"
require "yaml"

require "generator_spec/test_case"
require "generators/crm/tenant/tenant_generator"

describe Crm::Generators::TenantGenerator do
  include GeneratorSpec::TestCase

  destination File.expand_path("../../dummy/tmp/generators", __FILE__)

  before { prepare_destination }

  describe "#main" do
    before(:each) do
      @gen = generator(args)
    end

    after(:each) do
      name = nil
      args = nil
    end

    context "config file not present" do
      before { @gen.stub(:config_file_exists?).and_return(false) }

      let(:name) { "test_tenant" }
      let(:args) { ["#{name}"] }
      let(:options) { {} }

      it "raises an error" do
        expect{ @gen.main }.to raise_error(Thor::Error, "Config web_crm.yml not found, run `rails g crm:config` before!")
      end
    end

    context "config file present" do
      context "invalid option parameters" do
        context "no options" do
          before do
            @gen.options=(options)
            @gen.stub(:config_file_exists?).and_return(true)
          end

          let(:name) { "invalid_options_tenant" }
          let(:args) { ["#{name}"] }
          let(:options) { {} }

          it "raises an error" do
            error_msg = "Invalid options, not all required are present!"
            expect{ @gen.main }.to raise_error(Thor::Error, error_msg)
          end
        end

        context "not all required options present" do
          before do
            @gen.options=(options)
            @gen.stub(:config_file_exists?).and_return(true)
          end

          let(:name) { "tenant_invalid" }
          let(:args) { ["#{name}"] }
          let(:options) {{
            :url => "URL",
            :login => "LOGIN",
          }}

          it "raises an error" do
            error_message = "Invalid options, not all required are present!"
            expect{ @gen.main }.to raise_error(Thor::Error, error_message)
          end
        end

        context "tenant config already exists" do
          before do
            @gen.options=(options)
            @gen.stub(:config_file_exists?).and_return(true)
            @gen.stub(:load_config).and_return(config)
            MaxCrm::Settings.stub(:tenant_exists?).and_return(true)
          end

          let(:url) { "https://testtenant.crm.infopark.net" }
          let(:login) { "root" }
          let(:api_key) { SecureRandom.hex(20) }

          let(:config) do
            {
              "development" => {
                "crm" => {
                  name => {
                    "url" => url,
                    "login" => login,
                    "api_key" => api_key
                  }
                }
              }
            }
          end

          let(:name) { "test_tenant" }
          let(:args) { ["#{name}"] }

          let(:options) do
            {
              :url => url,
              :login => login,
              :api_key => api_key,
              :skip_envs => []
            }
          end

          it "raises an error" do
            expect{ @gen.main }.to raise_error(Thor::Error, "Tenant config `#{name}` already exists!")
          end
        end
      end

      context "valid options" do
        after(:each) { FileUtils.rm_rf Dir.glob("#{destination_root}/*") }

        context "with required options" do
          before do
            config_dir = "#{destination_root}/config"
            FileUtils.mkdir_p(config_dir)
            @gen.options=(options)
            @gen.stub(:config_file_exists?).and_return(true)
            @gen.stub(:config_filepath).and_return("#{config_dir}/web_crm.yml")
            @gen.stub(:tenant_exists?).and_return(false)
            @gen.stub(:load_config).and_return(config)
            @gen.main
          end

          after { FileUtils.rm_rf("#{destination_root}/config") }

          let(:url) { "https://testtenant.crm.infopark.net" }
          let(:login) { "root" }
          let(:api_key) { SecureRandom.hex(20) }

          let(:config) do
            {
              "development" => {
                "crm" => {}
              },
              "production" => {
                "crm" => {}
              },
              "test" => {
                "crm" => {}
              }
            }
          end

          let(:name) { "test_tenant" }
          let(:args) { ["#{name}"] }

          let(:options) do
            {
              :url => url,
              :login => login,
              :api_key => api_key
            }
          end

          specify { assert_file("#{destination_root}/config/web_crm.yml") }

          it "includes valid options" do
            contents = YAML.load_file("#{destination_root}/config/web_crm.yml")

            #expect(contents["development"]["crm"]).to have_key(name)
            binding.pry
          end
        end
      end
    end
  end
end
